package DAO;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import Model.Message;
import Util.ConnectionUtil;

public class MessageDAO {
    Logger logger  = LoggerFactory.getLogger(MessageDAO.class);
    /**
     * Insert a message into the Message table.
     * The message_id should be automatically generated by the sql database if it is not provided.
     * @param message an Message object.
     * @return The newly inserted message object if successful.
     */
    public Message insertMessage(Message message){
        if(message.getMessage_text().equals("")) {
            logger.info("Input cannot be empty");
            return null;
        }
        if (message.getMessage_text().length() > 255) {
            logger.info("Input is too long");
            return null;
        }
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Check if account exist
            String sql = "SELECT * FROM account WHERE account_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, message.getPosted_by());
            ResultSet rs = preparedStatement.executeQuery();
            if (rs == null) {
                logger.info("Account does not exist");
                return null;
            }

            //Adding message to database
            sql = "INSERT INTO message (posted_by, message_text, time_posted_epoch) VALUES (?, ?, ?)" ;
            preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            //write preparedStatement's setString method here.
            preparedStatement.setInt(1, message.getPosted_by());
            preparedStatement.setString(2, message.getMessage_text());
            preparedStatement.setLong(3, message.getTime_posted_epoch());

            preparedStatement.executeUpdate();
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_account_id = (int) pkeyResultSet.getLong(1);
                return new Message(generated_account_id,  message.getPosted_by(), message.getMessage_text(), message.getTime_posted_epoch());
            }
        }catch(SQLException e){
            logger.info("Error in insert message in messageDAO");
        }
        return null;
    }

    /**
     * Retrieve all messages from the Message table.
     * @return all Messages.
     */
    public List<Message> getAllMessages(){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messages = new ArrayList<>();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM message";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"),
                        rs.getInt("posted_by"),
                        rs.getString("message_text"),
                        rs.getLong("time_posted_epoch"));
                messages.add(message);
            }
        }catch(SQLException e){
            logger.info(e.getMessage());
        }
        return messages;
    }

    /**
     * Retrieve a message from the Message table, identified by its message_id.
     * @return a message identified by message_id.
     */
    public Message getMessageById(int message_id){
        Connection connection = ConnectionUtil.getConnection();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM message WHERE message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write preparedStatement's setInt method here.
            preparedStatement.setInt(1, message_id);

            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"),
                        rs.getInt("posted_by"),
                        rs.getString("message_text"),
                        rs.getLong("time_posted_epoch"));
                return message;
            }
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Delete a message from the Message table, identified by its message_id.
     * @return The deleted message.
     */
    public Message deleteMessageById(int message_id){
        Connection connection = ConnectionUtil.getConnection();
        Message message = getMessageById(message_id);
        if (message == null) {
            return null;
        }
        try {
            //Write SQL logic here
            String sql = "DELETE FROM message WHERE message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write preparedStatement's setInt method here.
            preparedStatement.setInt(1, message_id);
            preparedStatement.execute();
            return message;
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Update a message from the Message table, identified by its message_id.
     * @return The updated message.
     */
    public Message updateMessageById(int message_id, Message message){
        Connection connection = ConnectionUtil.getConnection();
        Message VerifyMessage = getMessageById(message_id);
        if (VerifyMessage == null) {
            return null;
        }
        if(message.getMessage_text().equals("")) {
            logger.info("Input cannot be empty");
            return null;
        }
        if (message.getMessage_text().length() > 255) {
            logger.info("Input is too long");
            return null;
        }
        try {
            //Write SQL logic here
            String sql = "UPDATE message SET message_text = ? WHERE message_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            //write preparedStatement's setInt method here.
            preparedStatement.setString(1, message.getMessage_text());
            preparedStatement.setInt(2, message_id);
            preparedStatement.execute();
            return getMessageById(message_id);
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        return null;
    }

    /**
     * Retrieve all messages from the message table join with account table based on the account_id.
     * @return All messages by the account identified by the account_id.
     */
    public List<Message> getMessagesByAccount(int account_id){
        Connection connection = ConnectionUtil.getConnection();
        List<Message> messages = new ArrayList<>();
        try {
            //Write SQL logic here
            String sql = "SELECT * FROM message INNER JOIN account ON message.posted_by = account.account_id WHERE account_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, account_id);
            ResultSet rs = preparedStatement.executeQuery();
            while(rs.next()){
                Message message = new Message(rs.getInt("message_id"),
                        rs.getInt("posted_by"),
                        rs.getString("message_text"),
                        rs.getLong("time_posted_epoch"));
                messages.add(message);
            }
        }catch(SQLException e){
            logger.info(e.getMessage());
        }
        return messages;
    }
}
